type Room @model @auth(rules: [{allow: private}]) {
  id: ID!
  test: Test @connection(name: "RoomTests")
  subjectId: String
  description: String
  host: JEUser @connection
  createTime: AWSDateTime
  password: String
  users: [JEUser] @connection(name: "RoomJEUsers")
  currentRecord: Record @connection(name: "RoomCurrentRecord")
}

type JEUser @model @auth(rules: [{allow: private}]) {
  id: ID!
  name: String
  room: Room @connection(name: "RoomJEUsers")
  team: Team @connection(name: "TeamJEUsers")
  tests: [TestJEUser] @connection(keyName: "byJEUser", fields: ["id"])
  hostTest: Test @connection(name: "TestHost")
}

type Team @model @auth(rules: [{allow: private}]) {
  id: ID!
  name: String
  description: String
  users: [JEUser] @connection(name: "TeamJEUsers")
  questionSet: [QuestionSet] @connection(name: "TeamQuestionSets")
}

type Test @model @auth(rules: [{allow: private}]) {
  id: ID!
  room: Room @connection(name: "RoomTests")
  team: Team
  subjectId: String
  users: [TestJEUser] @connection(keyName: "byTest", fields: ["id"])
  host: JEUser @connection(name: "TestHost")
  description: String
  timeBegin: AWSDateTime
  timeEnd: AWSDateTime
  records: [Record] @connection(name: "TestRecords")
  results: [Result] @connection(name: "TestResults")
  status: String!
  tags: [String]
}

type TestJEUser @model @key(name: "byJEUser", fields: ["userID", "testID"]) @key(name: "byTest", fields: ["testID", "userID"]) {
  id: ID!
  userID: ID!
  testID: ID!
  user: JEUser! @connection(fields: ["userID"])
  test: Test! @connection(fields: ["testID"])
}

type Record @model {
  id: ID!
  subjectId: String
  syncCode: String
  interviewer: JEUser
  timeBegin: AWSDateTime
  timeEnd: AWSDateTime
  status: String
  comment: [Comment] @connection(name: "RecordComments")
  history: [History] @connection(name: "RecordHistories")
  ques: QuesSnapshot
  question: QuestionSnapshot @connection(name: "RecordQuestionSnapshot")
  test: Test @connection(name: "TestRecords")
  room: Room @connection(name: "RoomCurrentRecord")
}

type Result @model {
  logic: Int!
  language: Int!
  workwith: Int!
  techreview: String!
  perstyreview: String!
  author: String!
  role: Reviewer
  test: Test @connection(name: "TestResults")
  time: AWSDateTime
}

enum Reviewer {
  HOST
  OBSERVER
}

type Comment @model {
  author: String
  time: AWSDateTime
  content: String
  hint: Int!
  quality: Int!
  completeness: Int!
  tags: [String]
  record: Record @connection(name: "RecordComments")
}

type History @model {
  id: ID!
  time: AWSDateTime
  code: String!
  record: Record @connection(name: "RecordHistories")
  snapComments: [SnapComment] @connection(name: "HistorySnapComments")
}

type SnapComment @model {
  id: ID!
  time: AWSDateTime
  author: String
  content: String!
  history: History @connection(name: "HistorySnapComments")
}

type QuesSnapshot {
  type: String
  name: String
  content: String
  test: String
}

type QuestionSnapshot @model {
  id: ID!
  type: String
  name: String
  content: String
  test: String
  record: Record @connection(name: "RecordQuestionSnapshot")
}

type QuestionSet @model {
  id: ID!
  team: Team @connection(name: "TeamQuestionSets")
  questions: [Question] @connection(name: "QuestionSetQuestions")
  name: String
  description: String
  tags: [String]
}

type Question @model {
  id: ID!
  type: String
  questionSet: QuestionSet @connection(name: "QuestionSetQuestions")
  name: String
  content: String
  test: String
  tags: [String]
}

type Subscription {
  onUpdateJEUserByJEUserId(id: String): JEUser @aws_subscribe(mutations: ["updateJEUser"])
  onUpdateTeamByTeamId(id: String): Team @aws_subscribe(mutations: ["updateTeam"])
  onUpdateTestByTestId(id: String): Test @aws_subscribe(mutations: ["updateTest"])
  onUpdateRoomByRoomId(id: String): Room @aws_subscribe(mutations: ["updateRoom"])
  onUpdateRecordByRecordId(id: String): Record @aws_subscribe(mutations: ["updateRecord"])
}
 