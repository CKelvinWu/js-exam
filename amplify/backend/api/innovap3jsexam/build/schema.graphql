type Room {
  id: ID!
  test: Test
  subjectId: String
  description: String
  status: String
  host: User
  users(filter: ModelUserFilterInput, sortDirection: ModelSortDirection, limit: Int, nextToken: String): ModelUserConnection
}

type User {
  id: ID!
  userId: String
  name: String
  rooms: Room
  teams: Team
}

type Team {
  id: ID!
  name: String
  description: String
  users(filter: ModelUserFilterInput, sortDirection: ModelSortDirection, limit: Int, nextToken: String): ModelUserConnection
  questionSet(filter: ModelQuestionSetFilterInput, sortDirection: ModelSortDirection, limit: Int, nextToken: String): ModelQuestionSetConnection
  test: Test
}

type Test {
  id: ID!
  room: Room
  team: Team
  subjectId: String
  users(filter: ModelUserFilterInput, sortDirection: ModelSortDirection, limit: Int, nextToken: String): ModelUserConnection
  progress: Int
  description: String
  testDate: String
  timeBegin: Int
  timeEnd: Int
  questionSource: [QuestionSnapshot]
  records(filter: ModelRecordFilterInput, sortDirection: ModelSortDirection, limit: Int, nextToken: String): ModelRecordConnection
  status: String
}

type Record {
  id: ID!
  subjectId: String
  interviewer: User
  timeBegin: Int
  timeEnd: Int
  history: String
  result: Result
  question: QuestionSnapshot
  test: Test
}

type Result {
  input: String
  output: String
  testCaseResults: String
}

type QuestionSnapshot {
  id: ID!
  name: String
  content: String
  test: String
}

type QuestionSet {
  id: ID!
  team: Team
  questions(filter: ModelQuestionFilterInput, sortDirection: ModelSortDirection, limit: Int, nextToken: String): ModelQuestionConnection
  name: String
  description: String
}

type Question {
  id: ID!
  questionSet: QuestionSet
  name: String
  content: String
  test: String
}

enum ModelSortDirection {
  ASC
  DESC
}

type ModelRoomConnection {
  items: [Room]
  nextToken: String
}

input ModelStringFilterInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
}

input ModelIDFilterInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
}

input ModelIntFilterInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  contains: Int
  notContains: Int
  between: [Int]
}

input ModelFloatFilterInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  contains: Float
  notContains: Float
  between: [Float]
}

input ModelBooleanFilterInput {
  ne: Boolean
  eq: Boolean
}

input ModelRoomFilterInput {
  id: ModelIDFilterInput
  subjectId: ModelStringFilterInput
  description: ModelStringFilterInput
  status: ModelStringFilterInput
  and: [ModelRoomFilterInput]
  or: [ModelRoomFilterInput]
  not: ModelRoomFilterInput
}

type Query {
  getRoom(id: ID!): Room
  listRooms(filter: ModelRoomFilterInput, limit: Int, nextToken: String): ModelRoomConnection
  getUser(id: ID!): User
  listUsers(filter: ModelUserFilterInput, limit: Int, nextToken: String): ModelUserConnection
  getTeam(id: ID!): Team
  listTeams(filter: ModelTeamFilterInput, limit: Int, nextToken: String): ModelTeamConnection
  getTest(id: ID!): Test
  listTests(filter: ModelTestFilterInput, limit: Int, nextToken: String): ModelTestConnection
  getRecord(id: ID!): Record
  listRecords(filter: ModelRecordFilterInput, limit: Int, nextToken: String): ModelRecordConnection
  getResult(id: ID!): Result
  listResults(filter: ModelResultFilterInput, limit: Int, nextToken: String): ModelResultConnection
  getQuestionSnapshot(id: ID!): QuestionSnapshot
  listQuestionSnapshots(filter: ModelQuestionSnapshotFilterInput, limit: Int, nextToken: String): ModelQuestionSnapshotConnection
  getQuestionSet(id: ID!): QuestionSet
  listQuestionSets(filter: ModelQuestionSetFilterInput, limit: Int, nextToken: String): ModelQuestionSetConnection
  getQuestion(id: ID!): Question
  listQuestions(filter: ModelQuestionFilterInput, limit: Int, nextToken: String): ModelQuestionConnection
}

input CreateRoomInput {
  subjectId: String
  description: String
  status: String
  roomTestId: ID
}

input UpdateRoomInput {
  id: ID!
  subjectId: String
  description: String
  status: String
  roomTestId: ID
}

input DeleteRoomInput {
  id: ID
}

type Mutation {
  createRoom(input: CreateRoomInput!): Room
  updateRoom(input: UpdateRoomInput!): Room
  deleteRoom(input: DeleteRoomInput!): Room
  createUser(input: CreateUserInput!): User
  updateUser(input: UpdateUserInput!): User
  deleteUser(input: DeleteUserInput!): User
  createTeam(input: CreateTeamInput!): Team
  updateTeam(input: UpdateTeamInput!): Team
  deleteTeam(input: DeleteTeamInput!): Team
  createTest(input: CreateTestInput!): Test
  updateTest(input: UpdateTestInput!): Test
  deleteTest(input: DeleteTestInput!): Test
  createRecord(input: CreateRecordInput!): Record
  updateRecord(input: UpdateRecordInput!): Record
  deleteRecord(input: DeleteRecordInput!): Record
  createResult(input: CreateResultInput!): Result
  updateResult(input: UpdateResultInput!): Result
  deleteResult(input: DeleteResultInput!): Result
  createQuestionSnapshot(input: CreateQuestionSnapshotInput!): QuestionSnapshot
  updateQuestionSnapshot(input: UpdateQuestionSnapshotInput!): QuestionSnapshot
  deleteQuestionSnapshot(input: DeleteQuestionSnapshotInput!): QuestionSnapshot
  createQuestionSet(input: CreateQuestionSetInput!): QuestionSet
  updateQuestionSet(input: UpdateQuestionSetInput!): QuestionSet
  deleteQuestionSet(input: DeleteQuestionSetInput!): QuestionSet
  createQuestion(input: CreateQuestionInput!): Question
  updateQuestion(input: UpdateQuestionInput!): Question
  deleteQuestion(input: DeleteQuestionInput!): Question
}

type Subscription {
  onCreateRoom: Room @aws_subscribe(mutations: ["createRoom"])
  onUpdateRoom: Room @aws_subscribe(mutations: ["updateRoom"])
  onDeleteRoom: Room @aws_subscribe(mutations: ["deleteRoom"])
  onCreateUser: User @aws_subscribe(mutations: ["createUser"])
  onUpdateUser: User @aws_subscribe(mutations: ["updateUser"])
  onDeleteUser: User @aws_subscribe(mutations: ["deleteUser"])
  onCreateTeam: Team @aws_subscribe(mutations: ["createTeam"])
  onUpdateTeam: Team @aws_subscribe(mutations: ["updateTeam"])
  onDeleteTeam: Team @aws_subscribe(mutations: ["deleteTeam"])
  onCreateTest: Test @aws_subscribe(mutations: ["createTest"])
  onUpdateTest: Test @aws_subscribe(mutations: ["updateTest"])
  onDeleteTest: Test @aws_subscribe(mutations: ["deleteTest"])
  onCreateRecord: Record @aws_subscribe(mutations: ["createRecord"])
  onUpdateRecord: Record @aws_subscribe(mutations: ["updateRecord"])
  onDeleteRecord: Record @aws_subscribe(mutations: ["deleteRecord"])
  onCreateResult: Result @aws_subscribe(mutations: ["createResult"])
  onUpdateResult: Result @aws_subscribe(mutations: ["updateResult"])
  onDeleteResult: Result @aws_subscribe(mutations: ["deleteResult"])
  onCreateQuestionSnapshot: QuestionSnapshot @aws_subscribe(mutations: ["createQuestionSnapshot"])
  onUpdateQuestionSnapshot: QuestionSnapshot @aws_subscribe(mutations: ["updateQuestionSnapshot"])
  onDeleteQuestionSnapshot: QuestionSnapshot @aws_subscribe(mutations: ["deleteQuestionSnapshot"])
  onCreateQuestionSet: QuestionSet @aws_subscribe(mutations: ["createQuestionSet"])
  onUpdateQuestionSet: QuestionSet @aws_subscribe(mutations: ["updateQuestionSet"])
  onDeleteQuestionSet: QuestionSet @aws_subscribe(mutations: ["deleteQuestionSet"])
  onCreateQuestion: Question @aws_subscribe(mutations: ["createQuestion"])
  onUpdateQuestion: Question @aws_subscribe(mutations: ["updateQuestion"])
  onDeleteQuestion: Question @aws_subscribe(mutations: ["deleteQuestion"])
}

type ModelUserConnection {
  items: [User]
  nextToken: String
}

input ModelUserFilterInput {
  id: ModelIDFilterInput
  userId: ModelStringFilterInput
  name: ModelStringFilterInput
  and: [ModelUserFilterInput]
  or: [ModelUserFilterInput]
  not: ModelUserFilterInput
}

input CreateUserInput {
  userId: String
  name: String
  userRoomsId: ID
  userTeamsId: ID
}

input UpdateUserInput {
  id: ID!
  userId: String
  name: String
  userRoomsId: ID
  userTeamsId: ID
}

input DeleteUserInput {
  id: ID
}

type ModelTeamConnection {
  items: [Team]
  nextToken: String
}

input ModelTeamFilterInput {
  id: ModelIDFilterInput
  name: ModelStringFilterInput
  description: ModelStringFilterInput
  and: [ModelTeamFilterInput]
  or: [ModelTeamFilterInput]
  not: ModelTeamFilterInput
}

input CreateTeamInput {
  name: String
  description: String
  teamTestId: ID
}

input UpdateTeamInput {
  id: ID!
  name: String
  description: String
  teamTestId: ID
}

input DeleteTeamInput {
  id: ID
}

type ModelTestConnection {
  items: [Test]
  nextToken: String
}

input ModelTestFilterInput {
  id: ModelIDFilterInput
  subjectId: ModelStringFilterInput
  progress: ModelIntFilterInput
  description: ModelStringFilterInput
  testDate: ModelStringFilterInput
  timeBegin: ModelIntFilterInput
  timeEnd: ModelIntFilterInput
  status: ModelStringFilterInput
  and: [ModelTestFilterInput]
  or: [ModelTestFilterInput]
  not: ModelTestFilterInput
}

input CreateTestInput {
  subjectId: String
  progress: Int
  description: String
  testDate: String
  timeBegin: Int
  timeEnd: Int
  status: String
  testRoomId: ID
  testTeamId: ID
}

input UpdateTestInput {
  id: ID!
  subjectId: String
  progress: Int
  description: String
  testDate: String
  timeBegin: Int
  timeEnd: Int
  status: String
  testRoomId: ID
  testTeamId: ID
}

input DeleteTestInput {
  id: ID
}

type ModelRecordConnection {
  items: [Record]
  nextToken: String
}

input ModelRecordFilterInput {
  id: ModelIDFilterInput
  subjectId: ModelStringFilterInput
  timeBegin: ModelIntFilterInput
  timeEnd: ModelIntFilterInput
  history: ModelStringFilterInput
  and: [ModelRecordFilterInput]
  or: [ModelRecordFilterInput]
  not: ModelRecordFilterInput
}

input CreateRecordInput {
  subjectId: String
  timeBegin: Int
  timeEnd: Int
  history: String
  recordTestId: ID
}

input UpdateRecordInput {
  id: ID!
  subjectId: String
  timeBegin: Int
  timeEnd: Int
  history: String
  recordTestId: ID
}

input DeleteRecordInput {
  id: ID
}

type ModelResultConnection {
  items: [Result]
  nextToken: String
}

input ModelResultFilterInput {
  input: ModelStringFilterInput
  output: ModelStringFilterInput
  testCaseResults: ModelStringFilterInput
  and: [ModelResultFilterInput]
  or: [ModelResultFilterInput]
  not: ModelResultFilterInput
}

input CreateResultInput {
  input: String
  output: String
  testCaseResults: String
}

input UpdateResultInput {
  input: String
  output: String
  testCaseResults: String
}

input DeleteResultInput {
  id: ID
}

type ModelQuestionSnapshotConnection {
  items: [QuestionSnapshot]
  nextToken: String
}

input ModelQuestionSnapshotFilterInput {
  id: ModelIDFilterInput
  name: ModelStringFilterInput
  content: ModelStringFilterInput
  test: ModelStringFilterInput
  and: [ModelQuestionSnapshotFilterInput]
  or: [ModelQuestionSnapshotFilterInput]
  not: ModelQuestionSnapshotFilterInput
}

input CreateQuestionSnapshotInput {
  name: String
  content: String
  test: String
}

input UpdateQuestionSnapshotInput {
  id: ID!
  name: String
  content: String
  test: String
}

input DeleteQuestionSnapshotInput {
  id: ID
}

type ModelQuestionSetConnection {
  items: [QuestionSet]
  nextToken: String
}

input ModelQuestionSetFilterInput {
  id: ModelIDFilterInput
  name: ModelStringFilterInput
  description: ModelStringFilterInput
  and: [ModelQuestionSetFilterInput]
  or: [ModelQuestionSetFilterInput]
  not: ModelQuestionSetFilterInput
}

input CreateQuestionSetInput {
  name: String
  description: String
  questionSetTeamId: ID
}

input UpdateQuestionSetInput {
  id: ID!
  name: String
  description: String
  questionSetTeamId: ID
}

input DeleteQuestionSetInput {
  id: ID
}

type ModelQuestionConnection {
  items: [Question]
  nextToken: String
}

input ModelQuestionFilterInput {
  id: ModelIDFilterInput
  name: ModelStringFilterInput
  content: ModelStringFilterInput
  test: ModelStringFilterInput
  and: [ModelQuestionFilterInput]
  or: [ModelQuestionFilterInput]
  not: ModelQuestionFilterInput
}

input CreateQuestionInput {
  name: String
  content: String
  test: String
  questionQuestionSetId: ID
}

input UpdateQuestionInput {
  id: ID!
  name: String
  content: String
  test: String
  questionQuestionSetId: ID
}

input DeleteQuestionInput {
  id: ID
}
