type Test @model {
  id: ID!
  teamId: ID
  subjectId: String #could be email
  interviewerIds: [String] #could be email(s)
  progress: Int
  description: String
  testDate: String #YYYY-MM-DD
  timeBegin: Int
  timeEnd: Int 
  records: [Record] @connection(name: "TestRecords")
  complete: Boolean
}
type Record @model {
  id: ID!
  subjectId: String #could be email
  interviewerId: String #could be email
  timeBegin: Int
  timeEnd: Int
  history: String # todo
  result: String
  question: [QuestionSnapshot] @connection(name: "RecordQuestionSnapshots")
  test: Test @connection(name: "TestRecords")
}
type QuestionSnapshot @model {
  id: ID!
  record: Record @connection(name: "RecordQuestionSnapshots")
  name: String
  content: String
  test: String
}
type QuestionSet @model {
  id: ID!
  team: Team @connection(name: "TeamQuestionSet")
  questions: [Question] @connection(name: "QuestionSetQuestions")
  name: String
  created: Int
  updated: Int
}
type Question @model {
  id: ID!
  questionSet: QuestionSet @connection(name: "QuestionSetQuestions")
  name: String
  content: String
  test: String
  created: Int
  updated: Int
}
type Team @model {
  id: ID!
  name: String
  description: String
  questionSet: [QuestionSet] @connection(name: "TeamQuestionSet")
}

